/*
 * RESERVATION SERVICE REST API
 * API for the Reservation Service. The API covers the functionality to create, read and update reservations and their metadata stored in the DAM metadata store, add and remove assets from the reservations.  The API is based on REST and only consumes JSON requests.  **Security**  This API is protected via the standard OIDC authentication provided by MIT. In order to use the API, an access token must be retrieved first and then used in the Authorization header with \"Bearer [Access Token]\". 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rs.client.api;

import com.rs.client.ApiCallback;
import com.rs.client.ApiClient;
import com.rs.client.ApiException;
import com.rs.client.ApiResponse;
import com.rs.client.Configuration;
import com.rs.client.Pair;
import com.rs.client.ProgressRequestBody;
import com.rs.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.rs.client.model.Field;
import com.rs.client.model.Fieldset;
import com.rs.client.model.Options;
import com.rs.client.model.ReservationServiceError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationApi {
    private ApiClient apiClient;

    public ConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1AppConfigFieldSetIdFieldsFieldIdGet
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdGetCall(String app, String fieldSetId, String fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/config/{fieldSetId}/fields/{fieldId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "fieldSetId" + "\\}", apiClient.escapeString(fieldSetId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdGetValidateBeforeCall(String app, String fieldSetId, String fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppConfigFieldSetIdFieldsFieldIdGet(Async)");
        }
        
        // verify the required parameter 'fieldSetId' is set
        if (fieldSetId == null) {
            throw new ApiException("Missing the required parameter 'fieldSetId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdGetCall(app, fieldSetId, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get single field
     * Retrieve detailed information about a single field and its configuration.
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @return Field
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Field apiV1AppConfigFieldSetIdFieldsFieldIdGet(String app, String fieldSetId, String fieldId) throws ApiException {
        ApiResponse<Field> resp = apiV1AppConfigFieldSetIdFieldsFieldIdGetWithHttpInfo(app, fieldSetId, fieldId);
        return resp.getData();
    }

    /**
     * Get single field
     * Retrieve detailed information about a single field and its configuration.
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @return ApiResponse&lt;Field&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Field> apiV1AppConfigFieldSetIdFieldsFieldIdGetWithHttpInfo(String app, String fieldSetId, String fieldId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdGetValidateBeforeCall(app, fieldSetId, fieldId, null, null);
        Type localVarReturnType = new TypeToken<Field>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get single field (asynchronously)
     * Retrieve detailed information about a single field and its configuration.
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdGetAsync(String app, String fieldSetId, String fieldId, final ApiCallback<Field> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdGetValidateBeforeCall(app, fieldSetId, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Field>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGet
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetCall(String app, String fieldSetId, String fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/config/{fieldSetId}/fields/{fieldId}/options"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "fieldSetId" + "\\}", apiClient.escapeString(fieldSetId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetValidateBeforeCall(String app, String fieldSetId, String fieldId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGet(Async)");
        }
        
        // verify the required parameter 'fieldSetId' is set
        if (fieldSetId == null) {
            throw new ApiException("Missing the required parameter 'fieldSetId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetCall(app, fieldSetId, fieldId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get options of a choice field
     * Only available if field is of type choice. Retreives the first level of options that are linked to the field
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @return Options
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Options apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGet(String app, String fieldSetId, String fieldId) throws ApiException {
        ApiResponse<Options> resp = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetWithHttpInfo(app, fieldSetId, fieldId);
        return resp.getData();
    }

    /**
     * Get options of a choice field
     * Only available if field is of type choice. Retreives the first level of options that are linked to the field
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @return ApiResponse&lt;Options&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Options> apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetWithHttpInfo(String app, String fieldSetId, String fieldId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetValidateBeforeCall(app, fieldSetId, fieldId, null, null);
        Type localVarReturnType = new TypeToken<Options>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get options of a choice field (asynchronously)
     * Only available if field is of type choice. Retreives the first level of options that are linked to the field
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetAsync(String app, String fieldSetId, String fieldId, final ApiCallback<Options> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsGetValidateBeforeCall(app, fieldSetId, fieldId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Options>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGet
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetCall(String app, String fieldSetId, String fieldId, String optionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/config/{fieldSetId}/fields/{fieldId}/options/{optionId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "fieldSetId" + "\\}", apiClient.escapeString(fieldSetId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
            .replaceAll("\\{" + "optionId" + "\\}", apiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetValidateBeforeCall(String app, String fieldSetId, String fieldId, String optionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGet(Async)");
        }
        
        // verify the required parameter 'fieldSetId' is set
        if (fieldSetId == null) {
            throw new ApiException("Missing the required parameter 'fieldSetId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGet(Async)");
        }
        
        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetCall(app, fieldSetId, fieldId, optionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get option
     * Only available if field is of type choice. Retrieves a specific option from the first level of the Optionset 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @return Options
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Options apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGet(String app, String fieldSetId, String fieldId, String optionId) throws ApiException {
        ApiResponse<Options> resp = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetWithHttpInfo(app, fieldSetId, fieldId, optionId);
        return resp.getData();
    }

    /**
     * Get option
     * Only available if field is of type choice. Retrieves a specific option from the first level of the Optionset 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @return ApiResponse&lt;Options&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Options> apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetWithHttpInfo(String app, String fieldSetId, String fieldId, String optionId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetValidateBeforeCall(app, fieldSetId, fieldId, optionId, null, null);
        Type localVarReturnType = new TypeToken<Options>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get option (asynchronously)
     * Only available if field is of type choice. Retrieves a specific option from the first level of the Optionset 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetAsync(String app, String fieldSetId, String fieldId, String optionId, final ApiCallback<Options> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdGetValidateBeforeCall(app, fieldSetId, fieldId, optionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Options>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGet
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetCall(String app, String fieldSetId, String fieldId, String optionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/config/{fieldSetId}/fields/{fieldId}/options/{optionId}/option"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "fieldSetId" + "\\}", apiClient.escapeString(fieldSetId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", apiClient.escapeString(fieldId.toString()))
            .replaceAll("\\{" + "optionId" + "\\}", apiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetValidateBeforeCall(String app, String fieldSetId, String fieldId, String optionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGet(Async)");
        }
        
        // verify the required parameter 'fieldSetId' is set
        if (fieldSetId == null) {
            throw new ApiException("Missing the required parameter 'fieldSetId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGet(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGet(Async)");
        }
        
        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetCall(app, fieldSetId, fieldId, optionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get child options of an option
     * Retrieves the second level of options that belong the the option selected on the first level. The schema of this resources can be recusively used up to 15 levels in order to retrieve deeper levels of options in large Optionsets. This should be used in order to browse Optionsets by their structure. 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @return Options
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Options apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGet(String app, String fieldSetId, String fieldId, String optionId) throws ApiException {
        ApiResponse<Options> resp = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetWithHttpInfo(app, fieldSetId, fieldId, optionId);
        return resp.getData();
    }

    /**
     * Get child options of an option
     * Retrieves the second level of options that belong the the option selected on the first level. The schema of this resources can be recusively used up to 15 levels in order to retrieve deeper levels of options in large Optionsets. This should be used in order to browse Optionsets by their structure. 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @return ApiResponse&lt;Options&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Options> apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetWithHttpInfo(String app, String fieldSetId, String fieldId, String optionId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetValidateBeforeCall(app, fieldSetId, fieldId, optionId, null, null);
        Type localVarReturnType = new TypeToken<Options>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get child options of an option (asynchronously)
     * Retrieves the second level of options that belong the the option selected on the first level. The schema of this resources can be recusively used up to 15 levels in order to retrieve deeper levels of options in large Optionsets. This should be used in order to browse Optionsets by their structure. 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param fieldId ID of a field (required)
     * @param optionId ID of an option (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetAsync(String app, String fieldSetId, String fieldId, String optionId, final ApiCallback<Options> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsFieldIdOptionsOptionIdOptionGetValidateBeforeCall(app, fieldSetId, fieldId, optionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Options>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppConfigFieldSetIdFieldsGet
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsGetCall(String app, String fieldSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/config/{fieldSetId}/fields"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "fieldSetId" + "\\}", apiClient.escapeString(fieldSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsGetValidateBeforeCall(String app, String fieldSetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppConfigFieldSetIdFieldsGet(Async)");
        }
        
        // verify the required parameter 'fieldSetId' is set
        if (fieldSetId == null) {
            throw new ApiException("Missing the required parameter 'fieldSetId' when calling apiV1AppConfigFieldSetIdFieldsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsGetCall(app, fieldSetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all available fields of a given fieldset
     * 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @return Fieldset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Fieldset apiV1AppConfigFieldSetIdFieldsGet(String app, String fieldSetId) throws ApiException {
        ApiResponse<Fieldset> resp = apiV1AppConfigFieldSetIdFieldsGetWithHttpInfo(app, fieldSetId);
        return resp.getData();
    }

    /**
     * Get all available fields of a given fieldset
     * 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @return ApiResponse&lt;Fieldset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Fieldset> apiV1AppConfigFieldSetIdFieldsGetWithHttpInfo(String app, String fieldSetId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsGetValidateBeforeCall(app, fieldSetId, null, null);
        Type localVarReturnType = new TypeToken<Fieldset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all available fields of a given fieldset (asynchronously)
     * 
     * @param app The application (required)
     * @param fieldSetId the id of the fieldset (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppConfigFieldSetIdFieldsGetAsync(String app, String fieldSetId, final ApiCallback<Fieldset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppConfigFieldSetIdFieldsGetValidateBeforeCall(app, fieldSetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Fieldset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
