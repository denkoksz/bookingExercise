/*
 * RESERVATION SERVICE REST API
 * API for the Reservation Service. The API covers the functionality to create, read and update reservations and their metadata stored in the DAM metadata store, add and remove assets from the reservations.  The API is based on REST and only consumes JSON requests.  **Security**  This API is protected via the standard OIDC authentication provided by MIT. In order to use the API, an access token must be retrieved first and then used in the Authorization header with \"Bearer [Access Token]\". 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rs.client.api;

import com.rs.client.ApiCallback;
import com.rs.client.ApiClient;
import com.rs.client.ApiException;
import com.rs.client.ApiResponse;
import com.rs.client.Configuration;
import com.rs.client.Pair;
import com.rs.client.ProgressRequestBody;
import com.rs.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.rs.client.model.AssetReservations;
import com.rs.client.model.Assets;
import com.rs.client.model.FreeTermQuantities;
import com.rs.client.model.ReservationServiceError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetsApi {
    private ApiClient apiClient;

    public AssetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1AppAssetsAssetIdFreetermquantitiesGet
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppAssetsAssetIdFreetermquantitiesGetCall(String app, String assetId, String startDate, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/assets/{assetId}/freetermquantities"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppAssetsAssetIdFreetermquantitiesGetValidateBeforeCall(String app, String assetId, String startDate, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppAssetsAssetIdFreetermquantitiesGet(Async)");
        }
        
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling apiV1AppAssetsAssetIdFreetermquantitiesGet(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling apiV1AppAssetsAssetIdFreetermquantitiesGet(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling apiV1AppAssetsAssetIdFreetermquantitiesGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppAssetsAssetIdFreetermquantitiesGetCall(app, assetId, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Give back all possible free term quantity combinations for the given term.
     * 
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return FreeTermQuantities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTermQuantities apiV1AppAssetsAssetIdFreetermquantitiesGet(String app, String assetId, String startDate, String endDate) throws ApiException {
        ApiResponse<FreeTermQuantities> resp = apiV1AppAssetsAssetIdFreetermquantitiesGetWithHttpInfo(app, assetId, startDate, endDate);
        return resp.getData();
    }

    /**
     * Give back all possible free term quantity combinations for the given term.
     * 
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @return ApiResponse&lt;FreeTermQuantities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTermQuantities> apiV1AppAssetsAssetIdFreetermquantitiesGetWithHttpInfo(String app, String assetId, String startDate, String endDate) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppAssetsAssetIdFreetermquantitiesGetValidateBeforeCall(app, assetId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<FreeTermQuantities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Give back all possible free term quantity combinations for the given term. (asynchronously)
     * 
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppAssetsAssetIdFreetermquantitiesGetAsync(String app, String assetId, String startDate, String endDate, final ApiCallback<FreeTermQuantities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppAssetsAssetIdFreetermquantitiesGetValidateBeforeCall(app, assetId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTermQuantities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppAssetsAssetIdReservationsGet
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppAssetsAssetIdReservationsGetCall(String app, String assetId, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/assets/{assetId}/reservations"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppAssetsAssetIdReservationsGetValidateBeforeCall(String app, String assetId, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppAssetsAssetIdReservationsGet(Async)");
        }
        
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling apiV1AppAssetsAssetIdReservationsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppAssetsAssetIdReservationsGetCall(app, assetId, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves all reservations which contain the asset specified by assetId
     * 
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @return AssetReservations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssetReservations apiV1AppAssetsAssetIdReservationsGet(String app, String assetId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<AssetReservations> resp = apiV1AppAssetsAssetIdReservationsGetWithHttpInfo(app, assetId, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieves all reservations which contain the asset specified by assetId
     * 
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @return ApiResponse&lt;AssetReservations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssetReservations> apiV1AppAssetsAssetIdReservationsGetWithHttpInfo(String app, String assetId, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppAssetsAssetIdReservationsGetValidateBeforeCall(app, assetId, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<AssetReservations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all reservations which contain the asset specified by assetId (asynchronously)
     * 
     * @param app The application (required)
     * @param assetId the asset id (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppAssetsAssetIdReservationsGetAsync(String app, String assetId, Integer offset, Integer limit, final ApiCallback<AssetReservations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppAssetsAssetIdReservationsGetValidateBeforeCall(app, assetId, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssetReservations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppAssetsGet
     * @param app The application (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppAssetsGetCall(String app, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/assets"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppAssetsGetValidateBeforeCall(String app, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppAssetsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppAssetsGetCall(app, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a list of assetIds that are used in reservations
     * 
     * @param app The application (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @return Assets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Assets apiV1AppAssetsGet(String app, Integer offset, Integer limit) throws ApiException {
        ApiResponse<Assets> resp = apiV1AppAssetsGetWithHttpInfo(app, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieves a list of assetIds that are used in reservations
     * 
     * @param app The application (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @return ApiResponse&lt;Assets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Assets> apiV1AppAssetsGetWithHttpInfo(String app, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppAssetsGetValidateBeforeCall(app, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<Assets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a list of assetIds that are used in reservations (asynchronously)
     * 
     * @param app The application (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppAssetsGetAsync(String app, Integer offset, Integer limit, final ApiCallback<Assets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppAssetsGetValidateBeforeCall(app, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Assets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
