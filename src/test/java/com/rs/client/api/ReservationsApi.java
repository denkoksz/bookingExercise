/*
 * RESERVATION SERVICE REST API
 * API for the Reservation Service. The API covers the functionality to create, read and update reservations and their metadata stored in the DAM metadata store, add and remove assets from the reservations.  The API is based on REST and only consumes JSON requests.  **Security**  This API is protected via the standard OIDC authentication provided by MIT. In order to use the API, an access token must be retrieved first and then used in the Authorization header with \"Bearer [Access Token]\". 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rs.client.api;

import com.rs.client.ApiCallback;
import com.rs.client.ApiClient;
import com.rs.client.ApiException;
import com.rs.client.ApiResponse;
import com.rs.client.Configuration;
import com.rs.client.Pair;
import com.rs.client.ProgressRequestBody;
import com.rs.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.rs.client.model.AddAssetBody;
import com.rs.client.model.CreateReservationBody;
import com.rs.client.model.Facets;
import com.rs.client.model.Reservation;
import com.rs.client.model.ReservationAsset;
import com.rs.client.model.ReservationAssets;
import com.rs.client.model.ReservationServiceError;
import com.rs.client.model.ReservationSuggestions;
import com.rs.client.model.Reservations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReservationsApi {
    private ApiClient apiClient;

    public ReservationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1AppReservationsFacetsGet
     * @param app The application (required)
     * @param query the embedded parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsFacetsGetCall(String app, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/facets"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsFacetsGetValidateBeforeCall(String app, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsFacetsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsFacetsGetCall(app, query, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the facet values for reservations
     * 
     * @param app The application (required)
     * @param query the embedded parameters (optional)
     * @return Facets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Facets apiV1AppReservationsFacetsGet(String app, String query) throws ApiException {
        ApiResponse<Facets> resp = apiV1AppReservationsFacetsGetWithHttpInfo(app, query);
        return resp.getData();
    }

    /**
     * Retrieves the facet values for reservations
     * 
     * @param app The application (required)
     * @param query the embedded parameters (optional)
     * @return ApiResponse&lt;Facets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Facets> apiV1AppReservationsFacetsGetWithHttpInfo(String app, String query) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsFacetsGetValidateBeforeCall(app, query, null, null);
        Type localVarReturnType = new TypeToken<Facets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the facet values for reservations (asynchronously)
     * 
     * @param app The application (required)
     * @param query the embedded parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsFacetsGetAsync(String app, String query, final ApiCallback<Facets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsFacetsGetValidateBeforeCall(app, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Facets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsGet
     * @param app The application (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsGetCall(String app, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsGetValidateBeforeCall(String app, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsGetCall(app, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a list of reservations defined by the query parameters
     * 
     * @param app The application (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @return Reservations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reservations apiV1AppReservationsGet(String app, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Reservations> resp = apiV1AppReservationsGetWithHttpInfo(app, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieves a list of reservations defined by the query parameters
     * 
     * @param app The application (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;Reservations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reservations> apiV1AppReservationsGetWithHttpInfo(String app, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsGetValidateBeforeCall(app, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Reservations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a list of reservations defined by the query parameters (asynchronously)
     * 
     * @param app The application (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsGetAsync(String app, Integer limit, Integer offset, final ApiCallback<Reservations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsGetValidateBeforeCall(app, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reservations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsPost
     * @param app The application (required)
     * @param body The body of the creatable reservation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsPostCall(String app, CreateReservationBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsPostValidateBeforeCall(String app, CreateReservationBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsPostCall(app, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new reservation.
     * 
     * @param app The application (required)
     * @param body The body of the creatable reservation (optional)
     * @return Reservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reservation apiV1AppReservationsPost(String app, CreateReservationBody body) throws ApiException {
        ApiResponse<Reservation> resp = apiV1AppReservationsPostWithHttpInfo(app, body);
        return resp.getData();
    }

    /**
     * Creates a new reservation.
     * 
     * @param app The application (required)
     * @param body The body of the creatable reservation (optional)
     * @return ApiResponse&lt;Reservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reservation> apiV1AppReservationsPostWithHttpInfo(String app, CreateReservationBody body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsPostValidateBeforeCall(app, body, null, null);
        Type localVarReturnType = new TypeToken<Reservation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new reservation. (asynchronously)
     * 
     * @param app The application (required)
     * @param body The body of the creatable reservation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsPostAsync(String app, CreateReservationBody body, final ApiCallback<Reservation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsPostValidateBeforeCall(app, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reservation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdAssetsAssetIdDelete
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsAssetIdDeleteCall(String app, String reservationId, String assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/assets/{assetId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsAssetIdDeleteValidateBeforeCall(String app, String reservationId, String assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdAssetsAssetIdDelete(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdAssetsAssetIdDelete(Async)");
        }
        
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling apiV1AppReservationsReservationIdAssetsAssetIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsAssetIdDeleteCall(app, reservationId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an asset from a reservation
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1AppReservationsReservationIdAssetsAssetIdDelete(String app, String reservationId, String assetId) throws ApiException {
        apiV1AppReservationsReservationIdAssetsAssetIdDeleteWithHttpInfo(app, reservationId, assetId);
    }

    /**
     * Delete an asset from a reservation
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1AppReservationsReservationIdAssetsAssetIdDeleteWithHttpInfo(String app, String reservationId, String assetId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsAssetIdDeleteValidateBeforeCall(app, reservationId, assetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an asset from a reservation (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsAssetIdDeleteAsync(String app, String reservationId, String assetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsAssetIdDeleteValidateBeforeCall(app, reservationId, assetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdAssetsAssetIdGet
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsAssetIdGetCall(String app, String reservationId, String assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/assets/{assetId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsAssetIdGetValidateBeforeCall(String app, String reservationId, String assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdAssetsAssetIdGet(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdAssetsAssetIdGet(Async)");
        }
        
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling apiV1AppReservationsReservationIdAssetsAssetIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsAssetIdGetCall(app, reservationId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves an asset with the given assetId that belongs to the reservation specified by reservationId.
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @return ReservationAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReservationAsset apiV1AppReservationsReservationIdAssetsAssetIdGet(String app, String reservationId, String assetId) throws ApiException {
        ApiResponse<ReservationAsset> resp = apiV1AppReservationsReservationIdAssetsAssetIdGetWithHttpInfo(app, reservationId, assetId);
        return resp.getData();
    }

    /**
     * Retrieves an asset with the given assetId that belongs to the reservation specified by reservationId.
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @return ApiResponse&lt;ReservationAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReservationAsset> apiV1AppReservationsReservationIdAssetsAssetIdGetWithHttpInfo(String app, String reservationId, String assetId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsAssetIdGetValidateBeforeCall(app, reservationId, assetId, null, null);
        Type localVarReturnType = new TypeToken<ReservationAsset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves an asset with the given assetId that belongs to the reservation specified by reservationId. (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param assetId the asset id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsAssetIdGetAsync(String app, String reservationId, String assetId, final ApiCallback<ReservationAsset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsAssetIdGetValidateBeforeCall(app, reservationId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReservationAsset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdAssetsGet
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsGetCall(String app, String reservationId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/assets"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsGetValidateBeforeCall(String app, String reservationId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdAssetsGet(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdAssetsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsGetCall(app, reservationId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a list of all assets that belong to the reservation specified by reservationId
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @return ReservationAssets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReservationAssets apiV1AppReservationsReservationIdAssetsGet(String app, String reservationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ReservationAssets> resp = apiV1AppReservationsReservationIdAssetsGetWithHttpInfo(app, reservationId, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieves a list of all assets that belong to the reservation specified by reservationId
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;ReservationAssets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReservationAssets> apiV1AppReservationsReservationIdAssetsGetWithHttpInfo(String app, String reservationId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsGetValidateBeforeCall(app, reservationId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<ReservationAssets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a list of all assets that belong to the reservation specified by reservationId (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsGetAsync(String app, String reservationId, Integer limit, Integer offset, final ApiCallback<ReservationAssets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsGetValidateBeforeCall(app, reservationId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReservationAssets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdAssetsPost
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsPostCall(String app, String reservationId, AddAssetBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/assets"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsPostValidateBeforeCall(String app, String reservationId, AddAssetBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdAssetsPost(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdAssetsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1AppReservationsReservationIdAssetsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsPostCall(app, reservationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an asset to a reservation specified by reservationId
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1AppReservationsReservationIdAssetsPost(String app, String reservationId, AddAssetBody body) throws ApiException {
        apiV1AppReservationsReservationIdAssetsPostWithHttpInfo(app, reservationId, body);
    }

    /**
     * Add an asset to a reservation specified by reservationId
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1AppReservationsReservationIdAssetsPostWithHttpInfo(String app, String reservationId, AddAssetBody body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsPostValidateBeforeCall(app, reservationId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add an asset to a reservation specified by reservationId (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdAssetsPostAsync(String app, String reservationId, AddAssetBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdAssetsPostValidateBeforeCall(app, reservationId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdDelete
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdDeleteCall(String app, String reservationId, String embed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (embed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "embed", embed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdDeleteValidateBeforeCall(String app, String reservationId, String embed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdDelete(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdDeleteCall(app, reservationId, embed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the reservation specified by the reservationId path parameter
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1AppReservationsReservationIdDelete(String app, String reservationId, String embed) throws ApiException {
        apiV1AppReservationsReservationIdDeleteWithHttpInfo(app, reservationId, embed);
    }

    /**
     * Delete the reservation specified by the reservationId path parameter
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1AppReservationsReservationIdDeleteWithHttpInfo(String app, String reservationId, String embed) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdDeleteValidateBeforeCall(app, reservationId, embed, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the reservation specified by the reservationId path parameter (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdDeleteAsync(String app, String reservationId, String embed, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdDeleteValidateBeforeCall(app, reservationId, embed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdGet
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdGetCall(String app, String reservationId, String embed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (embed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "embed", embed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdGetValidateBeforeCall(String app, String reservationId, String embed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdGet(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdGetCall(app, reservationId, embed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the reservation as specified by the reservationId path parameter
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @return Reservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reservation apiV1AppReservationsReservationIdGet(String app, String reservationId, String embed) throws ApiException {
        ApiResponse<Reservation> resp = apiV1AppReservationsReservationIdGetWithHttpInfo(app, reservationId, embed);
        return resp.getData();
    }

    /**
     * Retrieve the reservation as specified by the reservationId path parameter
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @return ApiResponse&lt;Reservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reservation> apiV1AppReservationsReservationIdGetWithHttpInfo(String app, String reservationId, String embed) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdGetValidateBeforeCall(app, reservationId, embed, null, null);
        Type localVarReturnType = new TypeToken<Reservation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the reservation as specified by the reservationId path parameter (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param embed the embedded parameters (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdGetAsync(String app, String reservationId, String embed, final ApiCallback<Reservation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdGetValidateBeforeCall(app, reservationId, embed, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reservation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsSuggestionsGet
     * @param app The application (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsSuggestionsGetCall(String app, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/suggestions"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsSuggestionsGetValidateBeforeCall(String app, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsSuggestionsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsSuggestionsGetCall(app, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the list of the configured suggestions
     * 
     * @param app The application (required)
     * @return ReservationSuggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReservationSuggestions apiV1AppReservationsSuggestionsGet(String app) throws ApiException {
        ApiResponse<ReservationSuggestions> resp = apiV1AppReservationsSuggestionsGetWithHttpInfo(app);
        return resp.getData();
    }

    /**
     * Retrieves the list of the configured suggestions
     * 
     * @param app The application (required)
     * @return ApiResponse&lt;ReservationSuggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReservationSuggestions> apiV1AppReservationsSuggestionsGetWithHttpInfo(String app) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsSuggestionsGetValidateBeforeCall(app, null, null);
        Type localVarReturnType = new TypeToken<ReservationSuggestions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the list of the configured suggestions (asynchronously)
     * 
     * @param app The application (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsSuggestionsGetAsync(String app, final ApiCallback<ReservationSuggestions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsSuggestionsGetValidateBeforeCall(app, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReservationSuggestions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
