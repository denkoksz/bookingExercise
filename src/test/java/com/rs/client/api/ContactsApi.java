/*
 * RESERVATION SERVICE REST API
 * API for the Reservation Service. The API covers the functionality to create, read and update reservations and their metadata stored in the DAM metadata store, add and remove assets from the reservations.  The API is based on REST and only consumes JSON requests.  **Security**  This API is protected via the standard OIDC authentication provided by MIT. In order to use the API, an access token must be retrieved first and then used in the Authorization header with \"Bearer [Access Token]\". 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rs.client.api;

import com.rs.client.ApiCallback;
import com.rs.client.ApiClient;
import com.rs.client.ApiException;
import com.rs.client.ApiResponse;
import com.rs.client.Configuration;
import com.rs.client.Pair;
import com.rs.client.ProgressRequestBody;
import com.rs.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.rs.client.model.AddContactBody;
import com.rs.client.model.Contacts;
import com.rs.client.model.ReservationServiceError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient apiClient;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1AppReservationsReservationIdContactsContactIdDelete
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param contactId the contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsContactIdDeleteCall(String app, String reservationId, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/contacts/{contactId}"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsContactIdDeleteValidateBeforeCall(String app, String reservationId, String contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdContactsContactIdDelete(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdContactsContactIdDelete(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling apiV1AppReservationsReservationIdContactsContactIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsContactIdDeleteCall(app, reservationId, contactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a contact from the reservation
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param contactId the contact id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1AppReservationsReservationIdContactsContactIdDelete(String app, String reservationId, String contactId) throws ApiException {
        apiV1AppReservationsReservationIdContactsContactIdDeleteWithHttpInfo(app, reservationId, contactId);
    }

    /**
     * Deletes a contact from the reservation
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param contactId the contact id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1AppReservationsReservationIdContactsContactIdDeleteWithHttpInfo(String app, String reservationId, String contactId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsContactIdDeleteValidateBeforeCall(app, reservationId, contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a contact from the reservation (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param contactId the contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsContactIdDeleteAsync(String app, String reservationId, String contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsContactIdDeleteValidateBeforeCall(app, reservationId, contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdContactsGet
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsGetCall(String app, String reservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/contacts"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsGetValidateBeforeCall(String app, String reservationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdContactsGet(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdContactsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsGetCall(app, reservationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves contacts of a reservation
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contacts apiV1AppReservationsReservationIdContactsGet(String app, String reservationId) throws ApiException {
        ApiResponse<Contacts> resp = apiV1AppReservationsReservationIdContactsGetWithHttpInfo(app, reservationId);
        return resp.getData();
    }

    /**
     * Retrieves contacts of a reservation
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contacts> apiV1AppReservationsReservationIdContactsGetWithHttpInfo(String app, String reservationId) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsGetValidateBeforeCall(app, reservationId, null, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves contacts of a reservation (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsGetAsync(String app, String reservationId, final ApiCallback<Contacts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsGetValidateBeforeCall(app, reservationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1AppReservationsReservationIdContactsPost
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsPostCall(String app, String reservationId, AddContactBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/{app}/reservations/{reservationId}/contacts"
            .replaceAll("\\{" + "app" + "\\}", apiClient.escapeString(app.toString()))
            .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2ClientCredentialsSecurity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsPostValidateBeforeCall(String app, String reservationId, AddContactBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'app' is set
        if (app == null) {
            throw new ApiException("Missing the required parameter 'app' when calling apiV1AppReservationsReservationIdContactsPost(Async)");
        }
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling apiV1AppReservationsReservationIdContactsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1AppReservationsReservationIdContactsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsPostCall(app, reservationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a contact to a reservation specified by reservation id
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1AppReservationsReservationIdContactsPost(String app, String reservationId, AddContactBody body) throws ApiException {
        apiV1AppReservationsReservationIdContactsPostWithHttpInfo(app, reservationId, body);
    }

    /**
     * Add a contact to a reservation specified by reservation id
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1AppReservationsReservationIdContactsPostWithHttpInfo(String app, String reservationId, AddContactBody body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsPostValidateBeforeCall(app, reservationId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a contact to a reservation specified by reservation id (asynchronously)
     * 
     * @param app The application (required)
     * @param reservationId the reservation id (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1AppReservationsReservationIdContactsPostAsync(String app, String reservationId, AddContactBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1AppReservationsReservationIdContactsPostValidateBeforeCall(app, reservationId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
