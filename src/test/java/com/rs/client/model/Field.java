/*
 * RESERVATION SERVICE REST API
 * API for the Reservation Service. The API covers the functionality to create, read and update reservations and their metadata stored in the DAM metadata store, add and remove assets from the reservations.  The API is based on REST and only consumes JSON requests.  **Security**  This API is protected via the standard OIDC authentication provided by MIT. In order to use the API, an access token must be retrieved first and then used in the Authorization header with \"Bearer [Access Token]\". 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rs.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.rs.client.model.FieldMeta;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Representation of a field all of its attributes. If the field is of type choise, the _meta element will contain a link to the options of that field
 */
@ApiModel(description = "Representation of a field all of its attributes. If the field is of type choise, the _meta element will contain a link to the options of that field")

public class Field {
  @SerializedName("_meta")
  private FieldMeta meta = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("text"),
    
    INTEGER("integer"),
    
    LONG("long"),
    
    FLOAT("float"),
    
    BOOLEAN("boolean"),
    
    DATE("date"),
    
    DATERANGE("daterange"),
    
    LINK("link"),
    
    CHOICE("choice"),
    
    CONTACT("contact"),
    
    ASSET("asset");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("hintText")
  private String hintText = null;

  @SerializedName("readOnly")
  private Boolean readOnly = null;

  @SerializedName("multiValue")
  private Boolean multiValue = null;

  @SerializedName("stringMaxLengthValue")
  private Integer stringMaxLengthValue = null;

  @SerializedName("integerMinValue")
  private Integer integerMinValue = null;

  @SerializedName("integerMaxValue")
  private Integer integerMaxValue = null;

  @SerializedName("longMinValue")
  private Long longMinValue = null;

  @SerializedName("longMaxValue")
  private Long longMaxValue = null;

  public Field meta(FieldMeta meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @ApiModelProperty(value = "")
  public FieldMeta getMeta() {
    return meta;
  }

  public void setMeta(FieldMeta meta) {
    this.meta = meta;
  }

  public Field id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "TF-1JE2TQ6A91H11", value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Field type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(example = "choice", value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Field label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @ApiModelProperty(example = "Title", value = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public Field hintText(String hintText) {
    this.hintText = hintText;
    return this;
  }

   /**
   * Get hintText
   * @return hintText
  **/
  @ApiModelProperty(example = "My New Reservation", value = "")
  public String getHintText() {
    return hintText;
  }

  public void setHintText(String hintText) {
    this.hintText = hintText;
  }

  public Field readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @ApiModelProperty(example = "false", value = "")
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public Field multiValue(Boolean multiValue) {
    this.multiValue = multiValue;
    return this;
  }

   /**
   * Get multiValue
   * @return multiValue
  **/
  @ApiModelProperty(example = "false", value = "")
  public Boolean getMultiValue() {
    return multiValue;
  }

  public void setMultiValue(Boolean multiValue) {
    this.multiValue = multiValue;
  }

  public Field stringMaxLengthValue(Integer stringMaxLengthValue) {
    this.stringMaxLengthValue = stringMaxLengthValue;
    return this;
  }

   /**
   * Get stringMaxLengthValue
   * @return stringMaxLengthValue
  **/
  @ApiModelProperty(example = "2000", value = "")
  public Integer getStringMaxLengthValue() {
    return stringMaxLengthValue;
  }

  public void setStringMaxLengthValue(Integer stringMaxLengthValue) {
    this.stringMaxLengthValue = stringMaxLengthValue;
  }

  public Field integerMinValue(Integer integerMinValue) {
    this.integerMinValue = integerMinValue;
    return this;
  }

   /**
   * Get integerMinValue
   * @return integerMinValue
  **/
  @ApiModelProperty(example = "1900", value = "")
  public Integer getIntegerMinValue() {
    return integerMinValue;
  }

  public void setIntegerMinValue(Integer integerMinValue) {
    this.integerMinValue = integerMinValue;
  }

  public Field integerMaxValue(Integer integerMaxValue) {
    this.integerMaxValue = integerMaxValue;
    return this;
  }

   /**
   * Get integerMaxValue
   * @return integerMaxValue
  **/
  @ApiModelProperty(example = "2800", value = "")
  public Integer getIntegerMaxValue() {
    return integerMaxValue;
  }

  public void setIntegerMaxValue(Integer integerMaxValue) {
    this.integerMaxValue = integerMaxValue;
  }

  public Field longMinValue(Long longMinValue) {
    this.longMinValue = longMinValue;
    return this;
  }

   /**
   * Get longMinValue
   * @return longMinValue
  **/
  @ApiModelProperty(example = "70000", value = "")
  public Long getLongMinValue() {
    return longMinValue;
  }

  public void setLongMinValue(Long longMinValue) {
    this.longMinValue = longMinValue;
  }

  public Field longMaxValue(Long longMaxValue) {
    this.longMaxValue = longMaxValue;
    return this;
  }

   /**
   * Get longMaxValue
   * @return longMaxValue
  **/
  @ApiModelProperty(example = "900000", value = "")
  public Long getLongMaxValue() {
    return longMaxValue;
  }

  public void setLongMaxValue(Long longMaxValue) {
    this.longMaxValue = longMaxValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Field field = (Field) o;
    return Objects.equals(this.meta, field.meta) &&
        Objects.equals(this.id, field.id) &&
        Objects.equals(this.type, field.type) &&
        Objects.equals(this.label, field.label) &&
        Objects.equals(this.hintText, field.hintText) &&
        Objects.equals(this.readOnly, field.readOnly) &&
        Objects.equals(this.multiValue, field.multiValue) &&
        Objects.equals(this.stringMaxLengthValue, field.stringMaxLengthValue) &&
        Objects.equals(this.integerMinValue, field.integerMinValue) &&
        Objects.equals(this.integerMaxValue, field.integerMaxValue) &&
        Objects.equals(this.longMinValue, field.longMinValue) &&
        Objects.equals(this.longMaxValue, field.longMaxValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, id, type, label, hintText, readOnly, multiValue, stringMaxLengthValue, integerMinValue, integerMaxValue, longMinValue, longMaxValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Field {\n");
    
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    hintText: ").append(toIndentedString(hintText)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    multiValue: ").append(toIndentedString(multiValue)).append("\n");
    sb.append("    stringMaxLengthValue: ").append(toIndentedString(stringMaxLengthValue)).append("\n");
    sb.append("    integerMinValue: ").append(toIndentedString(integerMinValue)).append("\n");
    sb.append("    integerMaxValue: ").append(toIndentedString(integerMaxValue)).append("\n");
    sb.append("    longMinValue: ").append(toIndentedString(longMinValue)).append("\n");
    sb.append("    longMaxValue: ").append(toIndentedString(longMaxValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

