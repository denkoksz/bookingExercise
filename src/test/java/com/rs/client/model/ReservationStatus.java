/*
 * RESERVATION SERVICE REST API
 * API for the Reservation Service. The API covers the functionality to create, read and update reservations and their metadata stored in the DAM metadata store, add and remove assets from the reservations.  The API is based on REST and only consumes JSON requests.  **Security**  This API is protected via the standard OIDC authentication provided by MIT. In order to use the API, an access token must be retrieved first and then used in the Authorization header with \"Bearer [Access Token]\". 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rs.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ReservationStatus
 */
@JsonAdapter(ReservationStatus.Adapter.class)
public enum ReservationStatus {
  
  NOT_STARTED("NOT STARTED"),
  
  DEVELOPMENT("DEVELOPMENT"),
  
  PRE_RESERVATION("PRE-RESERVATION"),
  
  RESERVATION("RESERVATION"),
  
  DELIVERED("DELIVERED"),
  
  READY_TO_AIR("READY TO AIR");

  private String value;

  ReservationStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ReservationStatus fromValue(String text) {
    for (ReservationStatus b : ReservationStatus.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<ReservationStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final ReservationStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ReservationStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ReservationStatus.fromValue(String.valueOf(value));
    }
  }
}

